//#define SA_DEBUG_MODE
using UnityEngine;
using System.Collections;
using UnityEngine.UI;
using System;
using UnityEngine.SceneManagement;

public class MultiplayerScr : AndroidNativeExampleBase 
{
	[HideInInspector]
	public Scripts scr;
	[HideInInspector]
	public Text 
	debugText,
	playerStatus,
	gameStateText,
	statusBarText;
	[HideInInspector]
	public Button playButton;
	[HideInInspector]
	public SA_PartisipantUI[] patricipants;

	private string inviteId;
	private string[] strVector;
	private int timer;
	private int sendDataFreq;

	[HideInInspector]
	public int 
	kick,
	moveL,
	moveR,
	jump,
	kmj,
	kick1,
	moveL1,
	moveR1,
	jump1,
	kmj1;

	private int defineTimer;

	void Awake1()
	{
		//Network.sendRate = 20;
		sendDataFreq = 10;
		#if (UNITY_ANDROID && !UNITY_EDITOR) || SA_DEBUG_MODE
		if (scr.alPrScr.multiplayer == 0)
			gameObject.SetActive(false);
		else
		{
			ConncetButtonPress();
			DontDestroyOnLoad(gameObject);
		}
		#else
		gameObject.SetActive(false);
		#endif
	}

	void Start() 
	{
		playerStatus.text = "Player Disconnected";

		GooglePlayInvitationManager.ActionInvitationReceived += OnInvite;
		GooglePlayInvitationManager.ActionInvitationAccepted += ActionInvitationAccepted;
		GooglePlayRTM.ActionRoomCreated += OnRoomCreated;
		GooglePlayConnection.ActionPlayerConnected +=  OnPlayerConnected;
		GooglePlayConnection.ActionPlayerDisconnected += OnPlayerDisconnected;
		GooglePlayConnection.ActionConnectionResultReceived += OnConnectionResult;

		if(GooglePlayConnection.State == GPConnectionState.STATE_CONNECTED) 
		{
			OnPlayerConnected ();
		} 
			
		GooglePlayRTM.ActionDataRecieved += OnGCDataReceived;
	}
		
	private void DrawParticipants() 
	{
		UpdateGameState("Room State: " + GooglePlayRTM.instance.currentRoom.status.ToString());

		foreach(SA_PartisipantUI p in patricipants) 
		{
			p.gameObject.SetActive(false);
		}

		int i = 0;
		foreach(GP_Participant p in GooglePlayRTM.instance.currentRoom.participants) 
		{
			patricipants[i].gameObject.SetActive(true);
			patricipants[i].SetParticipant(p);
			i++;
		}
	}
		
	private void UpdateGameState(string msg) 
	{
		gameStateText.text = msg;
	}


	public void FindMatch() 
	{
		if(GooglePlayConnection.State == GPConnectionState.STATE_CONNECTED)
			GooglePlayRTM.instance.FindMatch(1, 1);
	}
		
	private void SendPlayerPhysics()
	{
		float kT = scr.pMov.kickTorque;
		float kS = scr.pMov.kickSpeed;
		float jF = scr.pMov.jumpForce;
		float maxSp = scr.pMov.maxSpeed;
		int plInd = 0;

		for (int i = 0; i < scr.prMng.itemList.Count; i++)
		{
			if (scr.alScr.playerSprite == scr.prMng.itemList[i].icon)
				plInd = i;
		}
		 
		string msg = kT + ";" + kS + ";" + jF + ";" + maxSp + ";" + plInd;
		System.Text.UTF8Encoding  encoding = new System.Text.UTF8Encoding();
		byte[] data = encoding.GetBytes(msg);
		GooglePlayRTM.instance.SendDataToAll(data, GP_RTM_PackageType.RELIABLE);
	}

	public void SendAllData()
	{
		string msg = "";

		EncodeKMJ ();
		msg = kmj + ":";

		System.Text.UTF8Encoding encoding = new System.Text.UTF8Encoding();
		byte[] data = encoding.GetBytes(msg);
		GooglePlayRTM.instance.SendDataToAll(data, GP_RTM_PackageType.UNRELIABLE);

		if (jump == 1)
			jump = 0;
	}


	void FixedUpdate()
	{
		if (Time.timeScale != 0 && scr.alPrScr.multiplayer == 1)
		{
			//string tf1="";
			timer++;

			if (timer%sendDataFreq == 0)
				SendAllData();
			
			if (kick1 == 1)
				scr.enAlg.kickMP = true;
			else
				scr.enAlg.kickMP = false;
		}
	}
		
	void Update()
	{
		if (!scr.pMov.startGame)
			DrawParticipants();
		
		if (GooglePlayRTM.instance.currentRoom.status == GP_RTM_RoomStatus.ROOM_STATUS_ACTIVE && defineTimer < 2) 
		{
			if (SceneManager.GetActiveScene().name == "Level")
			{
				defineTimer ++;

				if (defineTimer == 1)
				{	
					SendPlayerPhysics();
					GameObject.Find("Menu Multiplayer").GetComponent<Animator> ().enabled = true;

					playButton.onClick.Invoke();
				}
			}
		}
	}

	private void OnGCDataReceived(GP_RTM_Network_Package package) 
	{
		System.Text.UTF8Encoding enc = new System.Text.UTF8Encoding();
		string str = enc.GetString(package.buffer);

		if (SceneManager.GetActiveScene().name == "Level") 
		{
			if (str.Contains (":")) 
			{
				strVector = str.Split (':');

				if (strVector.Length > 0)
				{
					int.TryParse (strVector[0], System.Globalization.NumberStyles.Any,
						new System.Globalization.CultureInfo ("en-US"), out kmj1);

					/*if (strVector[1] == "t")
						netTime2 = "t";
					else
						netTime2 = "d";

					int sendDataFreq0 = 0;

					int.TryParse (strVector[2], System.Globalization.NumberStyles.Any,
						new System.Globalization.CultureInfo ("en-US"), out sendDataFreq0);

					if (sendDataFreq0 != 0)
						sendDataFreq = sendDataFreq0;*/

					DecodeKMJ ();

					if (jump1 == 1) 
					{
						if (scr.grTr.isEnemyGrounded)
							scr.jScr.jump = true;
					}
				}
			}


			if (str.Contains(";"))
			{
				strVector = str.Split(';');
				float kT = 0;
				float kS = 0;
				float jF = 0;
				float maxSp = 0;
				int plInd = 0;

				if (strVector.Length == 3)
				{
					float.TryParse (strVector[0], System.Globalization.NumberStyles.Any,
						new System.Globalization.CultureInfo ("en-US"), out kT);
					float.TryParse (strVector[1], System.Globalization.NumberStyles.Any,
						new System.Globalization.CultureInfo ("en-US"), out kS);
					float.TryParse (strVector[2], System.Globalization.NumberStyles.Any,
						new System.Globalization.CultureInfo ("en-US"), out jF);
					float.TryParse (strVector[3], System.Globalization.NumberStyles.Any,
						new System.Globalization.CultureInfo ("en-US"), out maxSp);
					int.TryParse (strVector[4], System.Globalization.NumberStyles.Any,
						new System.Globalization.CultureInfo ("en-US"), out plInd);

					scr.enAlg.kickTorque = kT;
					scr.enAlg.kickSpeed = kS;
					scr.enAlg.jumpForce = jF;
					scr.enAlg.maxSpeed = maxSp;

					scr.alScr.enemySprite = scr.prMng.itemList[plInd].icon;
					scr.alScr.enemyFlag = scr.prMng.itemList[plInd].flag;
					scr.alScr.enemyName0 = scr.prMng.itemList[plInd].name0;
					scr.alScr.enemyName = scr.prMng.itemList[plInd].name;

					scr.enAlg.enemySprite.sprite = scr.alScr.enemySprite;
					scr.flagPan.enemyFlag.sprite = scr.alScr.enemyFlag;
					scr.flagPan.enemyName.text = scr.alScr.enemyName;
				}
			}
		}
	}


	private void OnPlayerDisconnected() 
	{
		statusBarText.text = "Player Disconnected";
		playerStatus.text = "Player Disconnected";
	}

	private void OnPlayerConnected() 
	{
		statusBarText.text = "Player Connected";
		playerStatus.text = GooglePlayManager.instance.player.name;

		GooglePlayInvitationManager.instance.RegisterInvitationListener();
		GooglePlayManager.Instance.LoadFriends();
	}

	void OnFriendListLoaded (GooglePlayResult result) 
	{
		Debug.Log("OnFriendListLoaded: " + result.Message);
		GooglePlayManager.ActionFriendsListLoaded -=  OnFriendListLoaded;

		if(result.IsSucceeded) {
			Debug.Log("Friends Load Success");

			//int i = 0;
			/*foreach(string fId in GooglePlayManager.instance.friendsList) {
				if(i < 3) {
					//friends[i].SetFriendId(fId);
				}
				i++;
			}*/
		}
	}

	private void OnConnectionResult(GooglePlayConnectionResult result) 
	{
		statusBarText.text = "ConnectionResul:  " + result.code.ToString();

		Debug.Log(result.code.ToString());
	}

	private void OnInvite(GP_Invite invitation) 
	{
		if (invitation.InvitationType != GP_InvitationType.INVITATION_TYPE_REAL_TIME) 
		{
			return;
		}

		inviteId = invitation.Id;

		AndroidDialog dialog =  AndroidDialog.Create("Invite", "You have new invite from: " + invitation.Participant.DisplayName, "Manage Manually", "Open Google Inbox");
		dialog.ActionComplete += OnInvDialogComplete;
	}

	void ActionInvitationAccepted (GP_Invite invitation) 
	{
		Debug.Log("ActionInvitationAccepted called");

		if (invitation.InvitationType != GP_InvitationType.INVITATION_TYPE_REAL_TIME) 
		{
			return;
		}

		Debug.Log("Starting The Game");
		//make sure you have prepared your scene to start the game before you accepting the invite. Room join even will be triggered
		GooglePlayRTM.instance.AcceptInvitation(invitation.Id);
	}

	private void OnRoomCreated(GP_GamesStatusCodes code) 
	{
		//if (SceneManager.GetActiveScene().name == "MainMenu")
		statusBarText.text = "Room Create Result: " + code.ToString();
	}



	private void OnInvDialogComplete(AndroidDialogResult result) 
	{
		switch(result) 
		{
		case AndroidDialogResult.YES:
			AndroidDialog dialog =  AndroidDialog.Create("Manage Invite", "Would you like to accept this invite?", "Accept", "Decline");
			dialog.ActionComplete += OnInvManageDialogComplete;
			break;
		case AndroidDialogResult.NO:
			GooglePlayRTM.instance.OpenInvitationInBoxUI();
			break;	
		}
	}

	private void OnInvManageDialogComplete(AndroidDialogResult result) 
	{
		switch(result) 
		{
		case AndroidDialogResult.YES:
			GooglePlayRTM.instance.AcceptInvitation(inviteId);
			break;
		case AndroidDialogResult.NO:
			GooglePlayRTM.instance.DeclineInvitation(inviteId);
			break;
		}
	
	}

	public void ConncetButtonPress() 
	{
		if(GooglePlayConnection.State == GPConnectionState.STATE_DISCONNECTED ||
			GooglePlayConnection.State == GPConnectionState.STATE_UNCONFIGURED) 
		{
			Debug.Log("GooglePlayManager State  -> " + GooglePlayConnection.State.ToString());

			//if (SceneManager.GetActiveScene().name == "MainMenu")
			statusBarText.text = "Connecting to Play Service...";

			GooglePlayConnection.instance.Connect ();
		}
	}

	public void DisconncetButtonPress() 
	{
		if(GooglePlayConnection.State == GPConnectionState.STATE_CONNECTED ||
			GooglePlayConnection.State == GPConnectionState.STATE_UNCONFIGURED) 
		{
			Debug.Log("GooglePlayManager State  -> " + GooglePlayConnection.State.ToString());

			//if (SceneManager.GetActiveScene().name == "MainMenu")
			statusBarText.text = "Disconnecting from Play Service...";

			GooglePlayConnection.instance.Disconnect ();
		}
	} 

	public void ShowWatingRoom() 
	{
		GooglePlayRTM.instance.ShowWaitingRoomIntent();
	}
		
	public void InviteFriends()
	{
		GooglePlayRTM.instance.OpenInvitationBoxUI(1, 1);
	}
		
	public void LeaveRoom() 
	{
		GooglePlayRTM.instance.LeaveRoom();
	}

	private void ChangeSendRate(int val)
	{
		Network.sendRate = val;
	}

	private void ChangeSendDataNum(int val)
	{
		sendDataFreq = val;
	}

	private void EncodeKMJ()
	{
		if (kick == 0 && moveL == 0 && moveR == 0 && jump == 0)
			kmj = 0;
		else if (kick == 0 && moveL == 0 && moveR == 0 && jump == 1)
			kmj = 1;
		else if (kick == 0 && moveL == 0 && moveR == 1 && jump == 0)
			kmj = 2;
		else if (kick == 0 && moveL == 0 && moveR == 1 && jump == 1)
			kmj = 3;
		else if (kick == 0 && moveL == 1 && moveR == 0 && jump == 0)
			kmj = 4;
		else if (kick == 0 && moveL == 1 && moveR == 0 && jump == 1)
			kmj = 5;
		else if (kick == 0 && moveL == 1 && moveR == 1 && jump == 0)
			kmj = 6;
		else if (kick == 0 && moveL == 1 && moveR == 1 && jump == 1)
			kmj = 7;
		else if (kick == 1 && moveL == 0 && moveR == 0 && jump == 0)
			kmj = 8;
		else if (kick == 1 && moveL == 0 && moveR == 0 && jump == 1)
			kmj = 9;
		else if (kick == 1 && moveL == 0 && moveR == 1 && jump == 0)
			kmj = 10;
		else if (kick == 1 && moveL == 0 && moveR == 1 && jump == 1)
			kmj = 11;
		else if (kick == 1 && moveL == 1 && moveR == 0 && jump == 0)
			kmj = 12;
		else if (kick == 1 && moveL == 1 && moveR == 0 && jump == 1)
			kmj = 13;
		else if (kick == 1 && moveL == 1 && moveR == 1 && jump == 0)
			kmj = 14;
		else if (kick == 1 && moveL == 1 && moveR == 1 && jump == 1)
			kmj = 15;
	}

	private void DecodeKMJ()
	{
		if (kmj1 == 0) {
			kick1 = 0; moveL1 = 0; moveR1 = 0; jump1 = 0;
		} else if (kmj1 == 1) {
			kick1 = 0; moveL1 = 0; moveR1 = 0; jump1 = 1;
		} else if (kmj1 == 2) {
			kick1 = 0; moveL1 = 0; moveR1 = 1; jump1 = 0;
		} else if (kmj1 == 3) {
			kick1 = 0; moveL1 = 0; moveR1 = 1; jump1 = 1;
		} else if (kmj1 == 4) {
			kick1 = 0; moveL1 = 1; moveR1 = 0; jump1 = 0;
		} else if (kmj1 == 5) {
			kick1 = 0; moveL1 = 1; moveR1 = 0; jump1 = 1;
		} else if (kmj1 == 6) {
			kick1 = 0; moveL1 = 1; moveR1 = 1; jump1 = 0;
		} else if (kmj1 == 7) {
			kick1 = 0; moveL1 = 1; moveR1 = 1; jump1 = 1;
		} else if (kmj1 == 8) {
			kick1 = 1; moveL1 = 0; moveR1 = 0; jump1 = 0;
		} else if (kmj1 == 9) {
			kick1 = 1; moveL1 = 0; moveR1 = 0; jump1 = 1;
		} else if (kmj1 == 10) {
			kick1 = 1; moveL1 = 0; moveR1 = 1; jump1 = 0;
		} else if (kmj1 == 11) {
			kick1 = 1; moveL1 = 0; moveR1 = 1; jump1 = 1;
		} else if (kmj1 == 12) {
			kick1 = 1; moveL1 = 1; moveR1 = 0; jump1 = 0;
		} else if (kmj1 == 13) {
			kick1 = 1; moveL1 = 1; moveR1 = 0; jump1 = 1;
		} else if (kmj1 == 14) {
			kick1 = 1; moveL1 = 1; moveR1 = 1; jump1 = 0;
		} else if (kmj1 == 15) {
			kick1 = 1; moveL1 = 1; moveR1 = 1; jump1 = 1;
		}
	}


	/*if(GooglePlayRTM.instance.currentRoom.status!= GP_RTM_RoomStatus.ROOM_VARIANT_DEFAULT 
			&& GooglePlayRTM.instance.currentRoom.status!= GP_RTM_RoomStatus.ROOM_STATUS_ACTIVE) 
			//showRoomButton.EnabledButton();
		else 
			//showRoomButton.DisabledButton();*/

	/*if(GooglePlayRTM.instance.currentRoom.status == GP_RTM_RoomStatus.ROOM_VARIANT_DEFAULT)
	//leaveRoomButton.DisabledButton();
	else 
		//leaveRoomButton.EnabledButton();*/

		/*if(GooglePlayConnection.State == GPConnectionState.STATE_CONNECTED) {
			if(GooglePlayManager.instance.player.icon != null) {
				Texture2D defTexture = GooglePlayManager.instance.player.icon;
				//avatar.GetComponent<Image>().sprite = Sprite.Create(defTexture,
					//new Rect(0, 0, defTexture.width, defTexture.height), new Vector2(0.5f, 0.5f));
			}
		} else {
			//avatar.GetComponent<Renderer>().material.mainTexture = defaulttexture;
			//avatar.GetComponent<Image>().sprite = defaultSprite;}*/

		/*string title = "Connect";
		if(GooglePlayConnection.State == GPConnectionState.STATE_CONNECTED){
			title = "Disconnect";
			//foreach(DefaultPreviewButton btn in ConnectionDependedntButtons) {
			//	btn.EnabledButton();
			//}
		} else {
			//foreach(DefaultPreviewButton btn in ConnectionDependedntButtons) {
			//	btn.DisabledButton();
			//}
			if(GooglePlayConnection.State == GPConnectionState.STATE_DISCONNECTED ||
				GooglePlayConnection.State == GPConnectionState.STATE_UNCONFIGURED) 
				//title = "Connect";
			else
				//title = "Connecting..";

			}
	//connectButText.text = title;*/
}
